// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/send_mail.proto

package send_mail

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SendMail_DoSendMail_FullMethodName = "/send_mail.SendMail/DoSendMail"
)

// SendMailClient is the client API for SendMail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendMailClient interface {
	DoSendMail(ctx context.Context, in *MailRequest, opts ...grpc.CallOption) (*MailResponse, error)
}

type sendMailClient struct {
	cc grpc.ClientConnInterface
}

func NewSendMailClient(cc grpc.ClientConnInterface) SendMailClient {
	return &sendMailClient{cc}
}

func (c *sendMailClient) DoSendMail(ctx context.Context, in *MailRequest, opts ...grpc.CallOption) (*MailResponse, error) {
	out := new(MailResponse)
	err := c.cc.Invoke(ctx, SendMail_DoSendMail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendMailServer is the server API for SendMail service.
// All implementations must embed UnimplementedSendMailServer
// for forward compatibility
type SendMailServer interface {
	DoSendMail(context.Context, *MailRequest) (*MailResponse, error)
	mustEmbedUnimplementedSendMailServer()
}

// UnimplementedSendMailServer must be embedded to have forward compatible implementations.
type UnimplementedSendMailServer struct {
}

func (UnimplementedSendMailServer) DoSendMail(context.Context, *MailRequest) (*MailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoSendMail not implemented")
}
func (UnimplementedSendMailServer) mustEmbedUnimplementedSendMailServer() {}

// UnsafeSendMailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendMailServer will
// result in compilation errors.
type UnsafeSendMailServer interface {
	mustEmbedUnimplementedSendMailServer()
}

func RegisterSendMailServer(s grpc.ServiceRegistrar, srv SendMailServer) {
	s.RegisterService(&SendMail_ServiceDesc, srv)
}

func _SendMail_DoSendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendMailServer).DoSendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendMail_DoSendMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendMailServer).DoSendMail(ctx, req.(*MailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SendMail_ServiceDesc is the grpc.ServiceDesc for SendMail service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendMail_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "send_mail.SendMail",
	HandlerType: (*SendMailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoSendMail",
			Handler:    _SendMail_DoSendMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/send_mail.proto",
}
