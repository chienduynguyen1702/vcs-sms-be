# version: '3'

services:
  postgres:
    image: postgres:12-alpine
    container_name: vcs-sms-db
    restart: always
    ports:
      - "$DB_PORT:5432"
    environment:
      POSTGRES_USER: vcs
      POSTGRES_PASSWORD: vcs
      POSTGRES_DB: $DB_NAME
    env_file:
      - ./gateway/.env
    volumes:
      - vcs_sms_db_volume:/var/lib/postgresql/data
    networks:
      - vcs-sms-checkpoint

  redis:
    image: redis:alpine
    container_name: vcs-sms-redis
    restart: always
    ports:
      - "$REDIS_PORT:6379"
    networks:
      - vcs-sms-checkpoint
  # run in container: using hostname as broker
  kafka:
    image: apache/kafka:latest
    hostname: broker
    container_name: vcs-sms-kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://broker:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    ports:
      - "9092:9092"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - vcs-sms-checkpoint

  # run in local: using hostname as localhost
  # kafka:
  #   image: apache/kafka:latest
  #   container_name: vcs-sms-kafka
  #   environment:
  #     KAFKA_NODE_ID: 1
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
  #     KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://localhost:19092'
  #     KAFKA_PROCESS_ROLES: 'localhost,controller'
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: '1@localhost:29093'
  #     KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
  #     KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
  #     KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
  #     CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
  #   ports:
  #     - "9092:9092"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - vcs-sms-checkpoint

  health-check:
    build:
      context: ./health-check
      dockerfile: dev.Dockerfile
    container_name: vcs-sms-health-check
    env_file:
      - ./health-check/.env.container
    restart: always
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - vcs-sms-checkpoint
  consumer:
    build:
      context: ./consumer
      dockerfile: dev.Dockerfile
    container_name: vcs-sms-consumer
    env_file:
      - ./consumer/.env.container
    restart: always
    depends_on:
      - health-check
      - postgres
      - redis
      - kafka
    networks:
      - vcs-sms-checkpoint

volumes:
  vcs_sms_db_volume:


networks:
  vcs-sms-checkpoint:
    driver: bridge
