definitions:
  dtos.CreateServerRequest:
    properties:
      ip:
        type: string
      name:
        type: string
    type: object
  dtos.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dtos.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dtos.RegisterRequest:
    properties:
      email:
        type: string
      organization_name:
        type: string
      password:
        type: string
      password_confirm:
        type: string
    required:
    - password
    - password_confirm
    type: object
  dtos.UpdateServerRequest:
    properties:
      ip:
        type: string
      name:
        type: string
    type: object
  dtos.UpdateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login Request
        in: body
        name: loginReq
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Login
      tags:
      - Authentication
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Logout
      tags:
      - Authentication
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register Request
        in: body
        name: registerReq
        required: true
        schema:
          $ref: '#/definitions/dtos.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Register
      tags:
      - Authentication
  /api/v1/ping:
    get:
      consumes:
      - application/json
      description: Ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Ping
      tags:
      - Ping
  /api/v1/servers:
    get:
      consumes:
      - application/json
      description: Get all servers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get all servers
      tags:
      - Server
    post:
      consumes:
      - application/json
      description: Create a new server
      parameters:
      - description: Create Server Request
        in: body
        name: CreateServerBodyRequest
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateServerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Create a new server
      tags:
      - Server
  /api/v1/servers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete server
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete server
      tags:
      - Server
    get:
      consumes:
      - application/json
      description: Get server by ID
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get server by ID
      tags:
      - Server
    put:
      consumes:
      - application/json
      description: Update server
      parameters:
      - description: Server ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Server Request
        in: body
        name: UpdateServerBodyRequest
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateServerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Update server
      tags:
      - Server
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: Email
        in: query
        name: email
        type: string
      - description: Username
        in: query
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: Create User Request
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Create user
      tags:
      - User
  /api/v1/users/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get user by ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: Update User Request
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Update user
      tags:
      - User
swagger: "2.0"
