// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/consumer.proto

package uptime_calculate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UptimeCalculate_RequestAggregation_FullMethodName = "/uptime_calculate.UptimeCalculate/RequestAggregation"
)

// UptimeCalculateClient is the client API for UptimeCalculate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UptimeCalculateClient interface {
	RequestAggregation(ctx context.Context, in *AggregationRequest, opts ...grpc.CallOption) (*AggregationResponse, error)
}

type uptimeCalculateClient struct {
	cc grpc.ClientConnInterface
}

func NewUptimeCalculateClient(cc grpc.ClientConnInterface) UptimeCalculateClient {
	return &uptimeCalculateClient{cc}
}

func (c *uptimeCalculateClient) RequestAggregation(ctx context.Context, in *AggregationRequest, opts ...grpc.CallOption) (*AggregationResponse, error) {
	out := new(AggregationResponse)
	err := c.cc.Invoke(ctx, UptimeCalculate_RequestAggregation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UptimeCalculateServer is the server API for UptimeCalculate service.
// All implementations must embed UnimplementedUptimeCalculateServer
// for forward compatibility
type UptimeCalculateServer interface {
	RequestAggregation(context.Context, *AggregationRequest) (*AggregationResponse, error)
	mustEmbedUnimplementedUptimeCalculateServer()
}

// UnimplementedUptimeCalculateServer must be embedded to have forward compatible implementations.
type UnimplementedUptimeCalculateServer struct {
}

func (UnimplementedUptimeCalculateServer) RequestAggregation(context.Context, *AggregationRequest) (*AggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAggregation not implemented")
}
func (UnimplementedUptimeCalculateServer) mustEmbedUnimplementedUptimeCalculateServer() {}

// UnsafeUptimeCalculateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UptimeCalculateServer will
// result in compilation errors.
type UnsafeUptimeCalculateServer interface {
	mustEmbedUnimplementedUptimeCalculateServer()
}

func RegisterUptimeCalculateServer(s grpc.ServiceRegistrar, srv UptimeCalculateServer) {
	s.RegisterService(&UptimeCalculate_ServiceDesc, srv)
}

func _UptimeCalculate_RequestAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UptimeCalculateServer).RequestAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UptimeCalculate_RequestAggregation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UptimeCalculateServer).RequestAggregation(ctx, req.(*AggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UptimeCalculate_ServiceDesc is the grpc.ServiceDesc for UptimeCalculate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UptimeCalculate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uptime_calculate.UptimeCalculate",
	HandlerType: (*UptimeCalculateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAggregation",
			Handler:    _UptimeCalculate_RequestAggregation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/consumer.proto",
}
